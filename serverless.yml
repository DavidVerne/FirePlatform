# Welcome to Serverless!

service: fireplatform
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-2
  profile: serverlessuser
  environment:
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutBucketPolicy
      Resource: "arn:aws:s3:::${self:provider.stage}-fireplatform-ui/*" 
plugins:
  - serverless-webpack
  - serverless-s3-deploy

custom:
  s3Deploy:
    buckets:
      - name: ${self:provider.stage}-fireplatform-ui

functions:
  loginUser:
    handler: server/handlers/cognito/loginUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  registerUser:
    handler: server/handlers/cognito/registerUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  authorizeUser:
    handler: server/handlers/cognito/authorizeUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  resendVerificationCode:
    handler: server/handlers/cognito/resendVerificationCode.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  forgotPassword:
    handler: server/handlers/cognito/forgotPassword.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  resetPassword:
    handler: server/handlers/cognito/resetPassword.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
  logoutUser:
    handler: server/handlers/cognito/logoutUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-fireplatform-ui
    # S3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: S3Bucket
    #     PolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal: "*"
    #           Action: 
    #             - s3:GetObject
    #           Resource: 
    #             Fn::Join:
    #               - ""
    #               - - "arn:aws:s3:::"
    #                 - Ref: S3Bucket
    #                 - "/*"
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
            - email
        AutoVerifiedAttributes:
            - email
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
          - Name: email
            AttributeDataType: String
            Mutable: false
          - Name: password
            AttributeDataType: String
            Mutable: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
            Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        GenerateSecret: false
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambda-execution-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole    

