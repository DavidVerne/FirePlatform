# Welcome to Serverless!

service: fireplatform
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  profile: serverlessuser
  environment:
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutBucketPolicy
      Resource: "arn:aws:s3:::${self:provider.stage}-fireplatform-ui/*" 
plugins:
  - serverless-webpack
  - serverless-s3-deploy

custom:
  s3Deploy:
    buckets:
      - name: ${self:provider.stage}-fireplatform-ui

functions:
  loginUser:
    handler: server/handlers/cognito/loginUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  registerUser:
    handler: server/handlers/cognito/registerUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  authorizeUser:
    handler: server/handlers/cognito/authorizeUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  resendVerificationCode:
    handler: server/handlers/cognito/resendVerificationCode.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  forgotPassword:
    handler: server/handlers/cognito/forgotPassword.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  resetPassword:
    handler: server/handlers/cognito/resetPassword.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
  logoutUser:
    handler: server/handlers/cognito/logoutUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-fireplatform-ui
        # AccessControl: Private
        # PublicAccessBlockConfiguration:
        #   BlockPublicPolicy: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:provider.stage}-fireplatform-ui/*
    ## Specifying the CloudFront Distribution to server your Web Application
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:provider.stage}-fireplatform-ui.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: FirePlatform
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: FirePlatform
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  # Outputs:
  #   CloudFrontDistributionOutput:
  #     Value:
  #       'Fn::GetAtt': [ CloudFrontDistribution, DomainName ]

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
            - email
        AutoVerifiedAttributes:
            - email
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
          - Name: email
            AttributeDataType: String
            Mutable: false
          - Name: password
            AttributeDataType: String
            Mutable: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
            Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        GenerateSecret: false
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambda-execution-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole    

